// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  athlete_id        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  stravaId      Int?      @unique
  ftp           Int?      // Functional Threshold Power
  weight        Float?    // in kg
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  activities         Activity[]
  weeklyPlans        WeeklyPlan[]
  recommendations    Recommendation[]
}

model Activity {
  id                  String   @id @default(cuid())
  stravaId            Int      @unique
  userId              String
  name                String
  type                String   // Run, Ride, VirtualRide, etc.
  startDate           DateTime
  distance            Float    // in meters
  movingTime          Int      // in seconds
  elapsedTime         Int      // in seconds
  totalElevationGain  Float    // in meters
  averageSpeed        Float?   // in m/s
  maxSpeed            Float?   // in m/s
  averageHeartrate    Float?
  maxHeartrate        Float?
  averageWatts        Float?
  maxWatts            Float?
  kilojoules          Float?
  averageCadence      Float?
  sufferScore         Int?     // Strava's relative effort

  // Calculated metrics
  tss                 Float?   // Training Stress Score
  intensity           Float?   // Normalized Power / FTP
  workoutType         String?  // Endurance, Tempo, Threshold, VO2Max, Anaerobic

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDate])
}

model WeeklyPlan {
  id              String   @id @default(cuid())
  userId          String
  weekStartDate   DateTime
  numSessions     Int      // Number of sessions planned for the week
  sessionDurations String  // JSON array of durations in minutes [45, 60, 45]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recommendations Recommendation[]

  @@unique([userId, weekStartDate])
}

model Recommendation {
  id              String   @id @default(cuid())
  userId          String
  weeklyPlanId    String
  sessionNumber   Int      // Which session in the week (1, 2, 3, etc.)

  // Workout details from Zwift
  workoutName     String
  workoutUrl      String?
  workoutDuration Int      // in minutes
  workoutType     String   // e.g., "FTP", "Endurance", "VO2Max"
  workoutTss      Float?   // Estimated TSS
  description     String?

  // Recommendation reasoning
  reason          String?  // Why this workout was recommended

  completed       Boolean  @default(false)
  completedAt     DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  weeklyPlan WeeklyPlan @relation(fields: [weeklyPlanId], references: [id], onDelete: Cascade)

  @@unique([weeklyPlanId, sessionNumber])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
